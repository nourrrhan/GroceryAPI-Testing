{
	"info": {
		"_postman_id": "69efab51-79e5-43a0-ba75-c47f854f2b21",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31152717"
	},
	"item": [
		{
			"name": "Get API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check that API have status = \"UP\"\r",
							"pm.test(\"Check API is UP\", function(){\r",
							"    pm.expect(pm.response.json().status).to.eql(\"UP\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/status/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"status",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Register a new client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that user created successfully\r",
							"pm.test(\"Check that a user is created successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// print and store the access token to use in the authorization\r",
							"//console.log(pm.response.json().accessToken);\r",
							"pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);\r",
							"\r",
							"// set number of items to 0 with a new client\r",
							"pm.collectionVariables.set(\"counter\", 0);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//pm.environment.set(\"customerName\", \"{{$randomFullName}}\");\r",
							"//pm.environment.set(\"customerName\", pm.variables.replaceIn('{{$randomFullName}}'));\r",
							"pm.collectionVariables.set(\"customerName\", pm.variables.replaceIn('{{$randomFullName}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomFullName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/api-clients",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code is 201 => cart is created\r",
							"pm.test(\"Check that cart is created successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// print and store cart id in variable\r",
							"//console.log(pm.response.json().cartId);\r",
							"pm.collectionVariables.set(\"cartID\", pm.response.json().cartId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/carts",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code is 200\r",
							"pm.test(\"Check that products are returned successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// get random index from 0 - 19\r",
							"var randIdx1 = Math.floor(Math.random() * 20);\r",
							"//console.log(randIdx1);\r",
							"\r",
							"// get a random element from the response\r",
							"//console.log(pm.response.json()[randIdx1].id);\r",
							"\r",
							"// store the id of element in variable\r",
							"pm.collectionVariables.set(\"productID\", pm.response.json()[randIdx1].id);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/products",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code is 200\r",
							"pm.test(\"Check that a product details returned successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check that the response has a specific schema\r",
							"// store the schema we want to display\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\":                   {\"type\": \"number\"},\r",
							"        \"category\":             {\"type\": \"string\"},\r",
							"        \"name\":                 {\"type\": \"string\"},\r",
							"        \"manufacturer\":         {\"type\": \"string\"},\r",
							"        \"price\":                {\"type\": \"number\"},\r",
							"        \"current-stock\":        {\"type\": \"number\"},\r",
							"        \"inStock\":              {\"type\": \"boolean\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"// test the response with the schema\r",
							"pm.test(\"Response has a valid Schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/products/:productId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"products",
						":productId"
					],
					"variable": [
						{
							"key": "productId",
							"value": "{{productID}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add an item to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check status code is 201 => item is added\r",
							"pm.test(\"Check that item added successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// print and store item id \r",
							"//console.log(pm.response.json().itemId);\r",
							"pm.collectionVariables.set(\"itemID\", pm.response.json().itemId);\r",
							"\r",
							"// repeat the last 2 requests to add another item to the cart\r",
							"var count = pm.collectionVariables.get(\"counter\");\r",
							"pm.collectionVariables.set(\"counter\", count + 1);\r",
							"if(count + 1 < 2){\r",
							"    postman.setNextRequest(\"Get all products\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"productId\": {{productID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/carts/:cartId/items",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get cart items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that cart found successfully\r",
							"pm.test(\"Check that cart items are returned successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/carts/:cartId/items",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify item quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that item quantity updated successfully\r",
							"pm.test(\"Check that item quantity updated successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						},
						{
							"key": "itemId",
							"value": "{{itemID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace item in cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that cart items updated successfully\r",
							"pm.test(\"Check that item replaced successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": {{productID}},\r\n    \"quantity\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						},
						{
							"key": "itemId",
							"value": "{{itemID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove item from cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that item deleted successfully\r",
							"pm.test(\"Check that an item is deleted successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"carts",
						":cartId",
						"items",
						":itemId"
					],
					"variable": [
						{
							"key": "cartId",
							"value": "{{cartID}}"
						},
						{
							"key": "itemId",
							"value": "{{itemID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that order is created successfully\r",
							"pm.test(\"Check that an order is created successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// print and store the order id to use in future\r",
							"//console.log(pm.response.json().orderId);\r",
							"pm.collectionVariables.set(\"orderId\", pm.response.json().orderId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartId\": \"{{cartID}}\",\r\n    \"customerName\": \"{{customerName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/orders",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that user has access to make retrieve all orders successfully\r",
							"pm.test(\"Check that orders are returned successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that order is returned successfully\r",
							"pm.test(\"Check that an order is returned successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// check that the response has a specific schema\r",
							"// store the schema we want to display\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\":                   {\"type\": \"string\"},\r",
							"        \r",
							"        \"items\":                {\"type\": \"array\",\r",
							"            \"items\":            [{ \"type\": \"object\", \r",
							"                \"properties\": {\r",
							"                    \"id\":           {\"type\": \"number\"},\r",
							"                    \"productId\":    {\"type\": \"number\"},\r",
							"                    \"quantity\":     {\"type\": \"number\"}\r",
							"                }\r",
							"            }]\r",
							"        },\r",
							"                    \r",
							"        \"customerName\":      {\"type\": \"string\"},\r",
							"        \"createdBy\":         {\"type\": \"string\"},\r",
							"        \"created\":           {\"type\": \"string\"},\r",
							"        \"timestamp\":         {\"type\": \"number\"},\r",
							"        \"processed\":         {\"type\": \"boolean\"},\r",
							"        \"comment\":           {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"// test the response with the schema\r",
							"pm.test(\"Response has a valid Schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders/:orderId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that order is updated successfully\r",
							"pm.test(\"Check that an order is updated successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"this is an updated order now\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/orders/:orderId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// check that order is deleted successfully\r",
							"pm.test(\"Check that an order is deleted successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders/:orderId",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://simple-grocery-store-api.glitch.me",
			"type": "string"
		},
		{
			"key": "cartID",
			"value": ""
		},
		{
			"key": "itemID",
			"value": ""
		},
		{
			"key": "productID",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "customerName",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "counter",
			"value": ""
		}
	]
}